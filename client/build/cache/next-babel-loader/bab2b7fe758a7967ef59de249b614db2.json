{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport DataTable from \"react-data-table-component\";\nimport { Clear } from \"@material-ui/icons\";\nexport default function Uploader() {\n  const {\n    0: columns,\n    1: setColumns\n  } = useState([]);\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: payload,\n    1: setPayload\n  } = useState([]);\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n  const {\n    0: status,\n    1: setStatus\n  } = useState(null);\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  const {\n    0: uploading,\n    1: setUploading\n  } = useState(false);\n  const ref = React.useRef(); // process CSV data\n\n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n    var check = ['postcode', 'householdSize', 'numWorkingAdults', 'noOfChildren'];\n    const list = [];\n\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n      if (headers && row.length == headers.length) {\n        const obj = {};\n\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n\n          if (d.length > 0) {\n            if (d[0] == '\"') {\n              d = d.substring(1, d.length - 1);\n            }\n\n            if (d[d.length - 1] == '\"') {\n              d = d.substring(d.length - 2, 1);\n            }\n          }\n\n          if (headers[j]) {\n            if (check.includes(headers[j])) {\n              obj[headers[j]] = parseInt(d);\n            } else if (headers[j] == \"lastDelivery\" && d != \"\") {\n              d = new Date(d);\n              let year = d.getFullYear();\n              let date = `${d.getDate()}`.padStart(2, \"0\");\n              let month = `${d.getMonth() + 1}`.padStart(2, \"0\");\n              obj[headers[j]] = [year, month, date].join('-');\n            } else {\n              obj[headers[j]] = d;\n            }\n          }\n        }\n\n        if (Object.values(obj).filter(x => x).length > 0) {\n          let main = {\n            \"id\": JSON.stringify(i),\n            \"method\": \"POST\",\n            \"url\": \"/Beneficiary\",\n            \"headers\": {\n              \"content-type\": \"application/json; odata.metadata=minimal; odata.streaming=true\",\n              \"odata-version\": \"4.0\"\n            },\n            \"body\": obj\n          };\n          payload.push(main);\n          list.push(obj);\n        } // prepare columns list from headers\n\n\n        const columns = headers.map(c => ({\n          name: c,\n          selector: c\n        }));\n        setData(list);\n        setColumns(columns);\n      }\n    }\n\n    setPayload({\n      \"requests\": payload\n    });\n  }; // handle file upload\n\n\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = evt => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, {\n        type: \"binary\"\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_csv(ws, {\n        header: 1\n      });\n      processData(data);\n    };\n\n    reader.readAsBinaryString(file);\n  };\n\n  const submitPayload = async () => {\n    setUploading(true);\n    let url = 'https://cors-anywhere.herokuapp.com/https://smucf-dev-ebs-g1t3-srv.cfapps.us10.hana.ondemand.com/api/$batch'; // let url = 'https://cors-anywhere.herokuapp.com/http://localhost:4004/api/$batch';\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    };\n\n    try {\n      console.log(\"attempting to send data\");\n      const response = await fetch(url, requestOptions);\n      const data = await response.json();\n      console.log(\"data :\" + JSON.stringify(data));\n\n      if (response.ok) {\n        let status = data['responses'][0]['status'];\n\n        if (status > 299) {\n          console.log(\"Problem uploading data\");\n          setError(true);\n          setStatus('Input in wrong format!\\n' + 'Ensure ints are int, strings are string, date in YYYY-MM-DD format!\\n' + 'Or data might already exist!');\n        } else {\n          console.log(\"Succesfully uploaded data\");\n          setShow(true);\n          setStatus('Successfully uploaded data');\n        }\n      } else {\n        console.log(\"Problem uploading data\");\n        setError(true);\n        setStatus('Problem uploading data');\n      }\n    } catch (error) {\n      console.log(\"Error :\" + error);\n      setError(true);\n      setStatus('Server might be down!');\n    }\n\n    setUploading(false);\n  };\n\n  const clearData = () => {\n    ref.current.value = \"\";\n    setData([]);\n    setColumns([]);\n    setPayload([]);\n    setShow(false);\n    setStatus(null);\n    setError(false);\n    setUploading(false);\n  };\n\n  const UploadInput = () => {\n    return __jsx(\"button\", {\n      id: \"upload\",\n      name: \"upload\",\n      className: \"cursor-pointer hover:bg-gray-600 py-1 px-4 rounded focus:outline-none focus:shadow-outline ml-4 border border-black\",\n      onClick: submitPayload,\n      disabled: uploading\n    }, uploading ? \"Uploading data...\" : \"Upload data\");\n  };\n\n  const ClearInput = () => {\n    return __jsx(\"button\", {\n      type: \"submit\",\n      id: \"clear\",\n      name: \"clear\",\n      value: \"Clear data\",\n      className: \"cursor-pointer hover:bg-gray-600 py-1 px-4 rounded focus:outline-none focus:shadow-outline ml-4 border border-black\",\n      onClick: clearData,\n      disabled: uploading\n    }, \"Clear Data\");\n  };\n\n  const close = () => {\n    setError(false);\n    setShow(false);\n  };\n\n  const GreenAlert = () => {\n    return __jsx(\"div\", {\n      className: \"w-2/4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4\",\n      role: \"alert\"\n    }, __jsx(\"span\", {\n      className: \"block sm:inline\"\n    }, \" \", status, \"  \"), __jsx(\"span\", {\n      className: \"absolute top-0 bottom-0 right-0 px-4 py-3\",\n      onClick: close\n    }, __jsx(\"svg\", {\n      className: \"fill-current h-6 w-6 text-green-500\",\n      role: \"button\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 20 20\"\n    }, __jsx(\"title\", null, \"Close\"), __jsx(\"path\", {\n      d: \"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\"\n    }))));\n  };\n\n  const RedAlert = () => {\n    return __jsx(\"div\", {\n      className: \"w-2/4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\",\n      role: \"alert\"\n    }, __jsx(\"span\", {\n      className: \"block sm:inline\"\n    }, status), __jsx(\"span\", {\n      className: \"absolute top-0 bottom-0 right-0 px-4 py-3\",\n      onClick: close\n    }, __jsx(\"svg\", {\n      className: \"fill-current h-6 w-6 text-red-500\",\n      role: \"button\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 20 20\"\n    }, __jsx(\"title\", null, \"Close\"), __jsx(\"path\", {\n      d: \"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\"\n    }))));\n  };\n\n  return __jsx(\"div\", {\n    className: \"container mx-auto px-4 sm:px-8 mt-18 flex-grow h-full\"\n  }, __jsx(\"div\", {\n    className: \"py-8 flex-grow flex-col flex bg-white shadow-lg rounded px-8 pt-6 pb-8 mb-4 mt-4 h-auto items-center\"\n  }, show ? __jsx(GreenAlert, null) : null, error ? __jsx(RedAlert, null) : null, __jsx(\"h1\", null, __jsx(\"b\", null, \"Upload CSV file of beneficiaries\")), __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    accept: \".csv,.xlsx,.xls\",\n    className: \"cursor-pointer hover:bg-gray-600 py-4 px-4 rounded focus:outline-none focus:shadow-outline mx-auto\",\n    ref: ref,\n    onChange: handleFileUpload\n  }), data.length > 0 ? __jsx(UploadInput, null) : __jsx(React.Fragment, null), data.length > 0 ? __jsx(ClearInput, null) : __jsx(React.Fragment, null)), __jsx(DataTable, {\n    pagination: true,\n    highlightOnHover: true,\n    columns: columns,\n    data: data\n  })));\n}\n;","map":null,"metadata":{},"sourceType":"module"}