{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Grid, Container } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport MainCard from './Cards/MainCard.js';\nimport BasketCard from './Cards/BasketCard.js';\nimport StockCard from './Cards/StockCard.js';\nimport uuid from 'react-uuid';\nimport { TodayOutlined } from '@material-ui/icons';\n\nclass Basket extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      basket: props.data.basket,\n      allStocks: props.data.allStocks,\n      basketItems: null,\n      selectedBasket: null,\n      editMode: false\n    };\n    this.expandBasket = this.expandBasket.bind(this);\n    this.resetShowBasket = this.resetShowBasket.bind(this);\n    this.showAllStocks = this.showAllStocks.bind(this);\n    this.handleIncrement = this.handleIncrement.bind(this);\n    this.handleDecrement = this.handleDecrement.bind(this);\n    this.saveBasket = this.saveBasket.bind(this);\n    this.createBasket = this.createBasket.bind(this);\n  }\n\n  resetShowBasket() {\n    this.setState({\n      selectedBasket: null,\n      basketItems: null,\n      editMode: false\n    });\n  }\n\n  expandBasket(item) {\n    this.setState({\n      basketItems: item.stocks,\n      selectedBasket: item.BasketID\n    });\n  }\n\n  showAllStocks() {\n    this.setState({\n      editMode: true\n    });\n  }\n\n  handleIncrement(item) {\n    const {\n      basketItems,\n      selectedBasket\n    } = this.state;\n\n    if (basketItems === null) {\n      return;\n    }\n\n    const id = item.stockID;\n    const itemExist = basketItems.filter(obj => obj.stock_stockID === id);\n\n    if (itemExist && itemExist.length) {\n      const updatedBasket = basketItems.map(obj => {\n        if (obj.stock_stockID === id) {\n          return _objectSpread(_objectSpread({}, obj), {}, {\n            quantity: obj.quantity + 1\n          });\n        } else {\n          return obj;\n        }\n      });\n      this.setState({\n        basketItems: updatedBasket\n      });\n      return;\n    } else {\n      const updatedItem = {\n        quantity: 1,\n        basket_BasketID: selectedBasket,\n        stock_stockID: id,\n        stock_name: item.name\n      };\n      const updatedBasket = [...basketItems, updatedItem];\n      this.setState({\n        basketItems: updatedBasket\n      });\n      return;\n    }\n  }\n\n  handleDecrement(item) {\n    const {\n      basketItems,\n      selectedBasket,\n      editMode\n    } = this.state;\n\n    if (!editMode) {\n      return;\n    }\n\n    const id = item.stock_stockID;\n    const itemToUpdate = basketItems.filter(obj => obj.stock_stockID === id)[0];\n\n    if (itemToUpdate.quantity === 1) {\n      const updatedBasket = basketItems.filter(obj => obj.stock_stockID !== id);\n      this.setState({\n        basketItems: updatedBasket\n      });\n      return;\n    } else {\n      const updatedBasket = basketItems.map(obj => {\n        if (obj.stock_stockID === id) {\n          return _objectSpread(_objectSpread({}, obj), {}, {\n            quantity: obj.quantity - 1\n          });\n        } else {\n          return obj;\n        }\n      });\n      this.setState({\n        basketItems: updatedBasket\n      });\n    }\n  }\n\n  saveBasket() {\n    const {\n      basket,\n      basketItems,\n      selectedBasket,\n      editMode\n    } = this.state;\n    const basketToUpdate = basket.find(item => item.BasketID === selectedBasket);\n\n    const updatedBasket = _objectSpread(_objectSpread({}, basketToUpdate), {}, {\n      stocks: basketItems\n    });\n\n    const updatedAllBaskets = basket.map(item => {\n      if (item.BasketID === selectedBasket) {\n        return updatedBasket;\n      } else {\n        return item;\n      }\n    });\n    this.setState({\n      basket: updatedAllBaskets,\n      editMode: false\n    });\n  }\n\n  createBasket(e) {\n    if (e.key !== 'Enter') {\n      return;\n    }\n\n    const {\n      basket\n    } = this.state;\n    console.log(basket);\n    const id = uuid.v4();\n    console.log(id); // TODO: create new basket\n  } // PUT API\n  // const url =\n  // \t'https://smucf-dev-ebs-g1t3-srv.cfapps.us10.hana.ondemand.com/api/Basket/' +\n  // \tselectedBasket;\n  // fetch(url, {\n  // \theaders: { 'Content-Type': 'application/json' },\n  // \tmethod: 'PUT',\n  // \tbody: JSON.stringify({\n  // \t\tBasketID: selectedBasket,\n  // \t\tname: basketToUpdate.name,\n  // \t\tstocks: basketToUpdate.stocks,\n  // \t}),\n  // });\n\n\n  render() {\n    const {\n      basket,\n      allStocks,\n      basketItems,\n      editMode\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"container mx-auto px-4 sm:px-8 mt-18 flex-grow h-full\"\n    }, __jsx(\"div\", {\n      className: \"py-8 flex-grow flex-col flex bg-white shadow-lg rounded px-8 pt-6 pb-8 mb-4 mt-4 h-auto\"\n    }, __jsx(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-start\",\n      alignItems: \"flex-start\",\n      spacing: 4,\n      className: \"flex flex-row\"\n    }, __jsx(Grid, {\n      item: true\n    }, __jsx(MainCard, {\n      onClick: this.expandBasket,\n      clickReset: this.resetShowBasket,\n      data: basket,\n      createBasket: this.createBasket\n    }, \"Presets\")), __jsx(Grid, {\n      item: true\n    }, __jsx(BasketCard, {\n      onClickEdit: this.showAllStocks,\n      onClickRemove: this.handleDecrement,\n      onClickSave: this.saveBasket,\n      data: basketItems\n    }, \"Food Items\")), __jsx(Grid, {\n      item: true\n    }, __jsx(StockCard, {\n      increment: this.handleIncrement,\n      checker: editMode,\n      data: allStocks\n    }, \"All Stocks\")))));\n  }\n\n}\n\nexport default Basket;","map":null,"metadata":{},"sourceType":"module"}