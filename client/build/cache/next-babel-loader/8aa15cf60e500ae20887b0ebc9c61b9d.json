{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/seanjin/Documents/EBS/project/G1T3-frontend/client/components/upload/uploader.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport DataTable from \"react-data-table-component\";\nimport { Clear } from \"@material-ui/icons\";\nexport default function Uploader() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState([]),\n      columns = _useState[0],\n      setColumns = _useState[1];\n\n  var _useState2 = useState([]),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState([]),\n      payload = _useState3[0],\n      setPayload = _useState3[1];\n\n  var _useState4 = useState(false),\n      show = _useState4[0],\n      setShow = _useState4[1];\n\n  var _useState5 = useState(null),\n      status = _useState5[0],\n      setStatus = _useState5[1];\n\n  var _useState6 = useState(false),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  var _useState7 = useState(false),\n      uploading = _useState7[0],\n      setUploading = _useState7[1];\n\n  var ref = React.useRef(); // process CSV data\n\n  var processData = function processData(dataString) {\n    var dataStringLines = dataString.split(/\\r\\n|\\n/);\n    var headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n    var check = ['postcode', 'householdSize', 'numWorkingAdults', 'noOfChildren'];\n    var list = [];\n\n    for (var i = 1; i < dataStringLines.length; i++) {\n      var row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n      if (headers && row.length == headers.length) {\n        var obj = {};\n\n        for (var j = 0; j < headers.length; j++) {\n          var d = row[j];\n\n          if (d.length > 0) {\n            if (d[0] == '\"') {\n              d = d.substring(1, d.length - 1);\n            }\n\n            if (d[d.length - 1] == '\"') {\n              d = d.substring(d.length - 2, 1);\n            }\n          }\n\n          if (headers[j]) {\n            if (check.includes(headers[j])) {\n              obj[headers[j]] = parseInt(d);\n            } else if (headers[j] == \"lastDelivery\" && d != \"\") {\n              d = new Date(d);\n              var year = d.getFullYear();\n              var date = \"\".concat(d.getDate()).padStart(2, \"0\");\n              var month = \"\".concat(d.getMonth() + 1).padStart(2, \"0\");\n              obj[headers[j]] = [year, month, date].join('-');\n            } else {\n              obj[headers[j]] = d;\n            }\n          }\n        }\n\n        if (Object.values(obj).filter(function (x) {\n          return x;\n        }).length > 0) {\n          var main = {\n            \"id\": JSON.stringify(i),\n            \"method\": \"POST\",\n            \"url\": \"/Beneficiary\",\n            \"headers\": {\n              \"content-type\": \"application/json; odata.metadata=minimal; odata.streaming=true\",\n              \"odata-version\": \"4.0\"\n            },\n            \"body\": obj\n          };\n          payload.push(main);\n          list.push(obj);\n        } // prepare columns list from headers\n\n\n        var _columns = headers.map(function (c) {\n          return {\n            name: c,\n            selector: c\n          };\n        });\n\n        setData(list);\n        setColumns(_columns);\n      }\n    }\n\n    setPayload({\n      \"requests\": payload\n    });\n  }; // handle file upload\n\n\n  var handleFileUpload = function handleFileUpload(e) {\n    var file = e.target.files[0];\n    var reader = new FileReader();\n\n    reader.onload = function (evt) {\n      /* Parse data */\n      var bstr = evt.target.result;\n      var wb = XLSX.read(bstr, {\n        type: \"binary\"\n      });\n      /* Get first worksheet */\n\n      var wsname = wb.SheetNames[0];\n      var ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      var data = XLSX.utils.sheet_to_csv(ws, {\n        header: 1\n      });\n      processData(data);\n    };\n\n    reader.readAsBinaryString(file);\n  };\n\n  var submitPayload = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var url, requestOptions, response, _data, _status;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setUploading(true);\n              url = 'https://cors-anywhere.herokuapp.com/https://smucf-dev-ebs-g1t3-srv.cfapps.us10.hana.ondemand.com/api/$batch'; // let url = 'https://cors-anywhere.herokuapp.com/http://localhost:4004/api/$batch';\n\n              requestOptions = {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n              };\n              _context.prev = 3;\n              console.log(\"attempting to send data\");\n              _context.next = 7;\n              return fetch(url, requestOptions);\n\n            case 7:\n              response = _context.sent;\n              _context.next = 10;\n              return response.json();\n\n            case 10:\n              _data = _context.sent;\n              console.log(\"data :\" + JSON.stringify(_data));\n\n              if (response.ok) {\n                _status = _data['responses'][0]['status'];\n\n                if (_status > 299) {\n                  console.log(\"Problem uploading data\");\n                  setError(true);\n                  setStatus('Input in wrong format!\\n' + 'Ensure ints are int, strings are string, date in YYYY-MM-DD format!\\n' + 'Or data might already exist!');\n                } else {\n                  console.log(\"Succesfully uploaded data\");\n                  setShow(true);\n                  setStatus('Successfully uploaded data');\n                }\n              } else {\n                console.log(\"Problem uploading data\");\n                setError(true);\n                setStatus('Problem uploading data');\n              }\n\n              _context.next = 20;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](3);\n              console.log(\"Error :\" + _context.t0);\n              setError(true);\n              setStatus('Server might be down!');\n\n            case 20:\n              setUploading(false);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 15]]);\n    }));\n\n    return function submitPayload() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var clearData = function clearData() {\n    ref.current.value = \"\";\n    setData([]);\n    setColumns([]);\n    setPayload([]);\n    setShow(false);\n    setStatus(null);\n    setError(false);\n    setUploading(false);\n  };\n\n  var UploadInput = function UploadInput() {\n    return __jsx(\"button\", {\n      id: \"upload\",\n      name: \"upload\",\n      className: \"cursor-pointer hover:bg-gray-600 py-1 px-4 rounded focus:outline-none focus:shadow-outline ml-4 border border-black\",\n      onClick: submitPayload,\n      disabled: uploading,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 7\n      }\n    }, uploading ? \"Uploading data...\" : \"Upload data\");\n  };\n\n  var ClearInput = function ClearInput() {\n    return __jsx(\"button\", {\n      type: \"submit\",\n      id: \"clear\",\n      name: \"clear\",\n      value: \"Clear data\",\n      className: \"cursor-pointer hover:bg-gray-600 py-1 px-4 rounded focus:outline-none focus:shadow-outline ml-4 border border-black\",\n      onClick: clearData,\n      disabled: uploading,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }\n    }, \"Clear Data\");\n  };\n\n  var close = function close() {\n    setError(false);\n    setShow(false);\n  };\n\n  var GreenAlert = function GreenAlert() {\n    return __jsx(\"div\", {\n      className: \"w-2/4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4\",\n      role: \"alert\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 7\n      }\n    }, __jsx(\"span\", {\n      className: \"block sm:inline\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }\n    }, \" \", status, \"  \"), __jsx(\"span\", {\n      className: \"absolute top-0 bottom-0 right-0 px-4 py-3\",\n      onClick: close,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }\n    }, __jsx(\"svg\", {\n      className: \"fill-current h-6 w-6 text-green-500\",\n      role: \"button\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 20 20\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }\n    }, __jsx(\"title\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }, \"Close\"), __jsx(\"path\", {\n      d: \"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }\n    }))));\n  };\n\n  var RedAlert = function RedAlert() {\n    return __jsx(\"div\", {\n      className: \"w-2/4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\",\n      role: \"alert\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 7\n      }\n    }, __jsx(\"span\", {\n      className: \"block sm:inline\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }\n    }, status), __jsx(\"span\", {\n      className: \"absolute top-0 bottom-0 right-0 px-4 py-3\",\n      onClick: close,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }\n    }, __jsx(\"svg\", {\n      className: \"fill-current h-6 w-6 text-red-500\",\n      role: \"button\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 20 20\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }\n    }, __jsx(\"title\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    }, \"Close\"), __jsx(\"path\", {\n      d: \"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }\n    }))));\n  };\n\n  return __jsx(\"div\", {\n    className: \"container mx-auto px-4 sm:px-8 mt-18 flex-grow h-full\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"py-8 flex-grow flex-col flex bg-white shadow-lg rounded px-8 pt-6 pb-8 mb-4 mt-4 h-auto items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }\n  }, show ? __jsx(GreenAlert, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 18\n    }\n  }) : null, error ? __jsx(RedAlert, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 19\n    }\n  }) : null, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }\n  }, __jsx(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  }, \"Upload CSV file of beneficiaries\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    accept: \".csv,.xlsx,.xls\",\n    className: \"cursor-pointer hover:bg-gray-600 py-4 px-4 rounded focus:outline-none focus:shadow-outline mx-auto\",\n    ref: ref,\n    onChange: handleFileUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }\n  }), data.length > 0 ? __jsx(UploadInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 28\n    }\n  }) : __jsx(React.Fragment, null), data.length > 0 ? __jsx(ClearInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 28\n    }\n  }) : __jsx(React.Fragment, null)), __jsx(DataTable, {\n    pagination: true,\n    highlightOnHover: true,\n    columns: columns,\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(Uploader, \"lCm3wgWggXkk0+NlU6dTrA9sr18=\");\n\n_c = Uploader;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Uploader\");","map":{"version":3,"sources":["/Users/seanjin/Documents/EBS/project/G1T3-frontend/client/components/upload/uploader.js"],"names":["React","useState","XLSX","DataTable","Clear","Uploader","columns","setColumns","data","setData","payload","setPayload","show","setShow","status","setStatus","error","setError","uploading","setUploading","ref","useRef","processData","dataString","dataStringLines","split","headers","check","list","i","length","row","obj","j","d","substring","includes","parseInt","Date","year","getFullYear","date","getDate","padStart","month","getMonth","join","Object","values","filter","x","main","JSON","stringify","push","map","c","name","selector","handleFileUpload","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_csv","header","readAsBinaryString","submitPayload","url","requestOptions","method","body","console","log","fetch","response","json","ok","clearData","current","value","UploadInput","ClearInput","close","GreenAlert","RedAlert"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport DataTable from \"react-data-table-component\";\nimport { Clear } from \"@material-ui/icons\";\n\nexport default function Uploader() {\n\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n  const [payload, setPayload] = useState([]);\n\n  const [show, setShow] = useState(false);\n  const [status, setStatus] = useState(null);\n  const [error, setError] = useState(false);\n  const [uploading, setUploading] = useState(false);\n\n  const ref = React.useRef();\n\n  // process CSV data\n  const processData = (dataString) => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(\n      /,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/\n    );\n    \n    var check = ['postcode', 'householdSize', 'numWorkingAdults','noOfChildren'];\n    const list = [];\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(\n        /,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/\n      );\n      if (headers && row.length == headers.length) {\n        const obj = {};\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n          if (d.length > 0) {\n            if (d[0] == '\"') {\n              d = d.substring(1, d.length - 1);\n            }\n            if (d[d.length - 1] == '\"') {\n              d = d.substring(d.length - 2, 1);\n            }\n          }\n\n          if (headers[j]) {\n            if (check.includes(headers[j])) {\n              obj[headers[j]] = parseInt(d);\n            } \n            else if (headers[j] == \"lastDelivery\" && d != \"\") {\n              d = new Date(d);\n              let year = d.getFullYear();\n              let date = `${d.getDate()}`.padStart(2, \"0\")\n              let month = `${d.getMonth() + 1}`.padStart(2, \"0\")\n              obj[headers[j]] = [year, month, date].join('-');\n            }\n            else {\n              obj[headers[j]] = d;\n            }\n          }\n        }\n\n        if (Object.values(obj).filter((x) => x).length > 0) {\n          let main = {\n            \"id\": JSON.stringify(i),\n            \"method\": \"POST\",\n            \"url\": \"/Beneficiary\",\n            \"headers\": {\n                \"content-type\": \"application/json; odata.metadata=minimal; odata.streaming=true\",\n                \"odata-version\": \"4.0\"\n            },\n            \"body\": obj\n          }\n          payload.push(main);\n          list.push(obj);\n        }\n\n        // prepare columns list from headers\n        const columns = headers.map((c) => ({\n          name: c,\n          selector: c,\n        }));\n\n        setData(list);\n        setColumns(columns);\n      }\n    }\n    setPayload({\n      \"requests\": payload\n    });\n  };\n\n  // handle file upload\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: \"binary\" });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n\n      processData(data);\n    };\n    reader.readAsBinaryString(file);\n  };\n\n  const submitPayload = async () => {\n    setUploading(true);\n\n    let url = 'https://cors-anywhere.herokuapp.com/https://smucf-dev-ebs-g1t3-srv.cfapps.us10.hana.ondemand.com/api/$batch';\n    // let url = 'https://cors-anywhere.herokuapp.com/http://localhost:4004/api/$batch';\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload)\n    };\n\n    try {\n      console.log(\"attempting to send data\");\n\n      const response = await fetch(url, requestOptions);\n      const data = await response.json();\n      console.log(\"data :\" +JSON.stringify(data));\n\n      if (response.ok) {\n        let status = data['responses'][0]['status'];\n        if (status > 299) {\n          console.log(\"Problem uploading data\");\n          setError(true);\n          setStatus('Input in wrong format!\\n' + 'Ensure ints are int, strings are string, date in YYYY-MM-DD format!\\n'+'Or data might already exist!');\n        }\n        else {\n\n          console.log(\"Succesfully uploaded data\");\n          setShow(true);\n          setStatus('Successfully uploaded data');\n        }\n      }\n      else {\n        console.log(\"Problem uploading data\");\n        setError(true);\n        setStatus('Problem uploading data');\n      }\n    } catch (error) {\n      console.log(\"Error :\"+error);\n      setError(true);\n      setStatus('Server might be down!');\n    }\n    setUploading(false);\n  }\n\n  const clearData = () => {\n    ref.current.value = \"\"\n    setData([]);\n    setColumns([]);\n    setPayload([]);\n    setShow(false);\n    setStatus(null);\n    setError(false);\n    setUploading(false);\n  }\n\n  const UploadInput = () => {\n    return (\n      <button\n        id=\"upload\" name=\"upload\" \n        className=\"cursor-pointer hover:bg-gray-600 py-1 px-4 rounded focus:outline-none focus:shadow-outline ml-4 border border-black\"\n        onClick={submitPayload} disabled={uploading} \n      >\n        {uploading ? \"Uploading data...\" : \"Upload data\"}\n      </button>\n    )\n  }\n\n  const ClearInput = () => {\n    return (\n      <button\n        type=\"submit\" id=\"clear\" name=\"clear\" value=\"Clear data\"\n        className=\"cursor-pointer hover:bg-gray-600 py-1 px-4 rounded focus:outline-none focus:shadow-outline ml-4 border border-black\"\n        onClick={clearData} disabled={uploading} \n      >\n        Clear Data\n      </button>\n    )\n  }\n\n  const close = () => {\n    setError(false);\n    setShow(false);\n  }\n\n  const GreenAlert = () => {\n    return (\n      <div\n        className='w-2/4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4'\n        role='alert'\n      >\n        <span className='block sm:inline'> {status}  </span>\n        <span\n          className='absolute top-0 bottom-0 right-0 px-4 py-3'\n          onClick={close}\n        >\n          <svg\n            className='fill-current h-6 w-6 text-green-500'\n            role='button'\n            xmlns='http://www.w3.org/2000/svg'\n            viewBox='0 0 20 20'\n          >\n            <title>Close</title>\n            <path d='M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z' />\n          </svg>\n        </span>\n      </div>\n    )\n  }\n\n  const RedAlert = () => {\n    return (\n      <div\n        className='w-2/4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4'\n        role='alert'\n      >\n        <span className='block sm:inline'>{status}</span>\n        <span\n          className='absolute top-0 bottom-0 right-0 px-4 py-3'\n          onClick={close} \n        > \n          <svg\n            className='fill-current h-6 w-6 text-red-500'\n            role='button'\n            xmlns='http://www.w3.org/2000/svg'\n            viewBox='0 0 20 20'\n          >\n            <title>Close</title>\n            <path d='M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z' />\n          </svg>\n        </span>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 sm:px-8 mt-18 flex-grow h-full\">\n      <div className=\"py-8 flex-grow flex-col flex bg-white shadow-lg rounded px-8 pt-6 pb-8 mb-4 mt-4 h-auto items-center\">\n\n        { show ? <GreenAlert /> : null }\n        { error ? <RedAlert /> : null }\n\n        <h1>\n          <b>Upload CSV file of beneficiaries</b>\n        </h1>\n\n        <div>\n        <input\n          type=\"file\"\n          accept=\".csv,.xlsx,.xls\"\n          className=\"cursor-pointer hover:bg-gray-600 py-4 px-4 rounded focus:outline-none focus:shadow-outline mx-auto\"\n          ref={ref}\n          onChange={handleFileUpload}\n        />\n        {data.length > 0 ? <UploadInput/> : <></>}\n        {data.length > 0 ? <ClearInput/> : <></>}\n        </div>\n\n        <DataTable pagination highlightOnHover columns={columns} data={data} />\n      </div>\n    </div>\n  );\n};"]},"metadata":{},"sourceType":"module"}