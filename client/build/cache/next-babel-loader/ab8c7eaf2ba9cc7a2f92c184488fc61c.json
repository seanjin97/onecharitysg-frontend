{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react'; // set context\n\nvar AuthContext = /*#__PURE__*/React.createContext({\n  name: null,\n  role: null,\n  isAuthenticated: false,\n  isLoading: true // setAuthenticated: () => {},\n\n}); // wraps around children component and add context\n\nexport var AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      name = _React$useState2[0],\n      setName = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      role = _React$useState4[0],\n      setRole = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      isAuthenticated = _React$useState6[0],\n      setAuthenticated = _React$useState6[1];\n\n  var _React$useState7 = React.useState(true),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      isLoading = _React$useState8[0],\n      setLoading = _React$useState8[1];\n\n  var setAuth = function setAuth(value) {\n    return setAuthenticated(value);\n  }; // verify cookie against server\n\n\n  useEffect(function () {\n    var initializeAuth = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response, data, _role;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!isAuthenticated) {\n                  _context.next = 3;\n                  break;\n                }\n\n                console.log('already authenticated');\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _context.prev = 3;\n                _context.next = 6;\n                return fetch('/api/auth/verify', {\n                  credentials: 'include'\n                });\n\n              case 6:\n                response = _context.sent;\n\n                if (!(response.status === 200)) {\n                  _context.next = 19;\n                  break;\n                }\n\n                console.log('server okay');\n                _context.next = 11;\n                return response.json();\n\n              case 11:\n                data = _context.sent;\n                setAuthenticated(true);\n                setLoading(false);\n                setName(data.name);\n                _role = data.role;\n                setRole(_role);\n                _context.next = 21;\n                break;\n\n              case 19:\n                // console.log(response.statusText);\n                console.log('not authenticated');\n                setLoading(false);\n\n              case 21:\n                _context.next = 27;\n                break;\n\n              case 23:\n                _context.prev = 23;\n                _context.t0 = _context[\"catch\"](3);\n                console.log('server might be down');\n                setLoading(false);\n\n              case 27:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 23]]);\n      }));\n\n      return function initializeAuth() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    initializeAuth();\n  }, []);\n  return __jsx(AuthContext.Provider, {\n    value: {\n      isAuthenticated: isAuthenticated,\n      isLoading: isLoading,\n      name: name,\n      role: role,\n      setAuth: setAuth,\n      setName: setName,\n      setRole: setRole\n    }\n  }, children);\n};\nexport function useAuth() {\n  var context = React.useContext(AuthContext);\n\n  if (context === undefined) {\n    throw new Error('missing AuthProvider');\n  }\n\n  return context;\n}\nexport function useIsAuthenticated() {\n  var context = useAuth();\n  return context.isAuthenticated;\n}\nexport function getName() {\n  var context = useAuth();\n  return context.name;\n}\nexport function getRole() {\n  var context = useAuth();\n  return context.role;\n}","map":null,"metadata":{},"sourceType":"module"}