{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n//https://github.com/SAPConversationalAI/Webchat\nimport Head from \"next/head\";\nimport { useState } from \"react\";\nimport Footer from \"../components/front/Footer\";\nimport Header from \"../components/homepage/header/Header\";\nimport SubHeader from \"../components/homepage/header/SubHeader\";\nimport Table from \"../components/homepage/table/Table\";\nimport withAuth from \"../hocs/withAuth\";\nimport { getName, getRole, useIsAuthenticated } from \"../providers/Auth\"; // use back with auth\n\nexport default withAuth(function Home({\n  data\n}) {\n  console.log(\"one\");\n  const isAuthenticated = useIsAuthenticated();\n  const name = getName();\n  const role = getRole();\n  const {\n    0: send,\n    1: setSend\n  } = useState([]);\n  window.webchatMethods = {\n    getMemory: conversationId => {\n      const memory = {\n        ids: Array.from(new Set(send))\n      };\n      return {\n        memory,\n        merge: true\n      };\n    }\n  };\n  return __jsx(\"div\", {\n    className: \"flex flex-col h-screen\"\n  }, __jsx(Head, null, __jsx(\"script\", {\n    src: \"https://cdn.cai.tools.sap/webchat/webchat.js\" // exposing credentials\n    ,\n    channelId: \"410590c5-18d4-483f-b510-4ce74feac089\",\n    token: \"2fffea9e69dda5b5e0a310e686961d96\",\n    id: \"cai-webchat\"\n  })), __jsx(Header, {\n    name: name,\n    role: role\n  }), __jsx(SubHeader, {\n    name: name,\n    role: role\n  }), __jsx(\"div\", {\n    className: \"antialiased bg-gray-200 flex-grow\"\n  }, __jsx(\"div\", {\n    className: \"container mx-auto px-4 sm:px-8 mt-18\"\n  }, __jsx(Table, {\n    odata: data,\n    send: send\n  }))), __jsx(Footer, null));\n}); // To-do: Cache request data\n// https://stackoverflow.com/questions/62005208/api-caching-for-next-js\n// known bug\n// fetches data even if not logged in\n\nexport async function getStaticProps() {\n  console.log(\"attempting to fetch data\"); //fetch odata\n\n  try {\n    const response = await fetch( //\"https://smucf-dev-ebs-g1t3-srv.cfapps.us10.hana.ondemand.com/api/Beneficiary\"\n    \"https://smucf-dev-ebs-g1t3-srv.cfapps.us10.hana.ondemand.com/api/Beneficiary?$expand=regionID,Stocks\");\n    var data = await response.json();\n    data = data.value;\n  } catch (error) {\n    let data = {};\n    console.log(\"Error fetching odata\");\n    return {\n      props: {\n        data\n      },\n      revalidate: 3600\n    };\n  } // final object for prediction\n\n\n  let stocks = {\n    data: []\n  };\n  let order = [\"id\", \"house\", \"biscuit\", \"Egg\", \"vege\", \"rice\", \"canned\", \"beverage\", \"instant\", \"bread\"];\n  let today = new Date();\n  today = today.getMonth() + \"/\" + today.getDate() + \"/\" + today.getFullYear();\n\n  for (var i = 0; i < data.length; i++) {\n    // if have stock\n    if (data[i].Stocks.length != 0) {\n      let innerData = {\n        id: data[i].beneficiaryID,\n        house: data[i].householdSize\n      };\n      let ordered = {};\n\n      for (var k = 0; k < data[i].Stocks.length; k++) {\n        innerData[data[i].Stocks[k].stock_stockID] = data[i].Stocks[k].stockCount;\n      } // ordering\n\n\n      for (var k = 0; k < order.length; k++) {\n        ordered[order[k]] = typeof innerData[order[k]] == \"undefined\" ? 0 : innerData[order[k]];\n      }\n\n      stocks.data.push(ordered);\n      data[i].delivery = today;\n    } // console.log(data[i]);\n\n  }\n\n  if (stocks.length > 0) {\n    console.log(\"Querying prediction api\");\n    let options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(stocks)\n    };\n    var prediction;\n\n    try {\n      // let prediction = await fetch(\"http://127.0.0.1:5000/api/predict\", options);\n      let prediction = await fetch(\"https://g1t3-foodstock-quick-wallaby-xx.cfapps.us10.hana.ondemand.com/api/predict\", options);\n      prediction = await prediction.json();\n      var map = new Map();\n\n      for (var i = 0; i < prediction.length; i++) {\n        map.set(prediction[i][\"id\"], prediction[i][\"result\"]);\n      }\n\n      for (let i = 0; i < data.length; i++) {\n        // if have stock\n        if (data[i].Stocks.length != 0) {\n          data[i].stock = map.get(data[i].beneficiaryID);\n        } // console.log(data[i]);\n\n      }\n    } catch (error) {\n      console.log(\"Error posting to prediction api\");\n      console.log(error);\n    }\n  }\n\n  console.log(\"Sucessfully fetched data\");\n  return {\n    props: {\n      data\n    },\n    revalidate: 3600\n  };\n}","map":null,"metadata":{},"sourceType":"module"}