{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { useTable, usePagination } from 'react-table';\nvar firstNames = ['jane', 'john', 'alex'];\nvar lastName = ['smith', 'jones'];\nvar data = Array(100).fill().map(function (a) {\n  return {\n    firstName: firstNames[Math.floor(Math.random() * firstNames.length)],\n    lastName: lastName[Math.floor(Math.random() * lastName.length)],\n    age: Math.ceil(75 * Math.random())\n  };\n});\nvar columns = [{\n  Header: 'Name',\n  columns: [{\n    Header: 'First Name',\n    accessor: 'firstName'\n  }, {\n    Header: 'Last Name',\n    accessor: 'lastName'\n  }]\n}, {\n  Header: 'Other Info',\n  columns: [{\n    Header: 'Age',\n    accessor: 'age'\n  }]\n}];\n\nvar Table = function Table(_ref) {\n  var columns = _ref.columns,\n      data = _ref.data;\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    initialState: {\n      pageIndex: 0\n    }\n  }, usePagination),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      _useTable$state = _useTable.state,\n      pageIndex = _useTable$state.pageIndex,\n      pageSize = _useTable$state.pageSize;\n\n  return __jsx(React.Fragment, null, __jsx(\"table\", getTableProps(), __jsx(\"thead\", null, headerGroups.map(function (headerGroup) {\n    return __jsx(\"tr\", headerGroup.getHeaderGroupProps(), headerGroup.headers.map(function (column) {\n      return __jsx(\"th\", column.getHeaderProps(), column.render('Header'));\n    }));\n  })), __jsx(\"tbody\", getTableBodyProps(), page.map(function (row, i) {\n    prepareRow(row);\n    return __jsx(\"tr\", row.getRowProps(), row.cells.map(function (cell) {\n      return __jsx(\"td\", cell.getCellProps(), cell.render('Cell'));\n    }));\n  }))), __jsx(\"div\", null, __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    disabled: !canPreviousPage\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return previousPage();\n    },\n    disabled: !canPreviousPage\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage\n  }, '>>'), ' ', __jsx(\"span\", null, \"Page\", ' ', __jsx(\"strong\", null, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", null, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: function onChange(e) {\n      var page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    }\n  })), ' ', __jsx(\"select\", {\n    value: pageSize,\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    }\n  }, [10, 20, 30, 40, 50].map(function (pageSize) {\n    return __jsx(\"option\", {\n      key: pageSize,\n      value: pageSize\n    }, \"Show \", pageSize);\n  }))));\n};\n\nexport default function App() {\n  return __jsx(\"div\", {\n    className: \"App\"\n  }, __jsx(Table, {\n    columns: columns,\n    data: data\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}