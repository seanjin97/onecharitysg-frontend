{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react'; // set context\n\nconst AuthContext = /*#__PURE__*/React.createContext({\n  name: null,\n  role: null,\n  isAuthenticated: false,\n  isLoading: true // setAuthenticated: () => {},\n\n}); // wraps around children component and add context\n\nexport const AuthProvider = ({\n  children\n}) => {\n  const [name, setName] = React.useState(null);\n  const [role, setRole] = React.useState(null);\n  const [isAuthenticated, setAuthenticated] = React.useState(false);\n  const [isLoading, setLoading] = React.useState(true);\n\n  const setAuth = value => setAuthenticated(value); // verify cookie against server\n\n\n  useEffect(() => {\n    const initializeAuth = async () => {\n      if (isAuthenticated) {\n        console.log('already authenticated');\n        return;\n      }\n\n      try {\n        // const response = await fetch('http://localhost:8080/mylocalfunction/', {credentials: 'include'});\n        // const response = await fetch('http://localhost:5000/api/auth/verify', {credentials: 'include'});\n        //const response = await fetch('https://67590a5d-49be-4eb3-a302-c90be94feb62-faas-http.tenant.us10.functions.xfs.cloud.sap/mylocalhttptrigger/', {credentials: 'include'});\n        const response = await fetch('/api/auth/verify', {\n          credentials: 'include'\n        });\n\n        if (response.status === 200) {\n          console.log('server okay');\n          const data = await response.json();\n          setAuthenticated(true);\n          setLoading(false);\n          setName(data.name);\n          let role = data.role;\n          setRole(role);\n        } else {\n          // console.log(response.statusText);\n          console.log('not authenticated');\n          setLoading(false);\n        }\n      } catch (error) {\n        console.log('server might be down');\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n  return __jsx(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      isLoading,\n      name,\n      role,\n      setAuth,\n      setName,\n      setRole\n    }\n  }, children);\n};\nexport function useAuth() {\n  const context = React.useContext(AuthContext);\n\n  if (context === undefined) {\n    throw new Error('missing AuthProvider');\n  }\n\n  return context;\n}\nexport function useIsAuthenticated() {\n  const context = useAuth();\n  return context.isAuthenticated;\n}\nexport function getName() {\n  const context = useAuth();\n  return context.name;\n}\nexport function getRole() {\n  const context = useAuth();\n  return context.role;\n}","map":null,"metadata":{},"sourceType":"module"}